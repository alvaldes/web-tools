---
import Layout from "../layouts/Layout.astro";
import { getPage, getTags, getBlocks } from "../lib/notion";
import { colorVariants } from "../lib/utils";

interface NotionPage {
  object: string;
  id: string;
  created_time: string;
  last_edited_time: string;
  created_by: any;
  last_edited_by: any;
  cover?: any;
  icon?: any;
  parent: any;
  archived: boolean;
  properties: Properties;
  url: string;
  public_url?: any;
  request_id: string;
}

interface Properties {
  Image: Image;
  "Parent item": any;
  Tags: Tags;
  URL: Image;
  "Sub-item": any;
  Name: Name;
}

interface Name {
  id: string;
  type: string;
  title: Title[];
}

interface Title {
  type: string;
  text: Text;
  annotations: any;
  plain_text: string;
  href?: any;
}

interface Text {
  content: string;
  link?: any;
}

interface Tags {
  id: string;
  type: string;
  relation: Relation[];
  has_more: boolean;
}

interface Relation {
  id: string;
}

interface Image {
  id: string;
  type: string;
  url: string;
}

const { id } = Astro.params;
if (!id) {
  throw new Error("ID parameter is missing");
}
const tool: NotionPage = await getPage(id);
const tags = await getTags();
const blocks = await getBlocks(id);
let tagsList: any[] = [];

const loadTags = async () => {
  tool.properties.Tags.relation.map((t: any) => {
    tagsList = [...tagsList, ...tags.filter((x) => x.id === t.id)];
  });
};
await loadTags();
const toolName = tool.properties.Name.title[0].plain_text;
---

<Layout title="ωεβ Τσφδ">
  <main class="container mx-auto px-0 md:px-4 xl:px-16 2xl:px-40 flex flex-col">
    <nav class="flex justify-between py-4 px-4 sm:px-0" aria-label="Breadcrumb">
      <a href="/" class="text-gray-400 hover:text-white">
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="2rem"
          height="2rem"
          viewBox="0 0 24 24"
        >
          <g fill="none">
            <path
              d="M24 0v24H0V0zM12.593 23.258l-.011.002l-.071.035l-.02.004l-.014-.004l-.071-.035c-.01-.004-.019-.001-.024.005l-.004.01l-.017.428l.005.02l.01.013l.104.074l.015.004l.012-.004l.104-.074l.012-.016l.004-.017l-.017-.427c-.002-.01-.009-.017-.017-.018m.265-.113l-.013.002l-.185.093l-.01.01l-.003.011l.018.43l.005.012l.008.007l.201.093c.012.004.023 0 .029-.008l.004-.014l-.034-.614c-.003-.012-.01-.02-.02-.022m-.715.002a.023.023 0 0 0-.027.006l-.006.014l-.034.614c0 .012.007.02.017.024l.015-.002l.201-.093l.01-.008l.004-.011l.017-.43l-.003-.012l-.01-.01z"
            ></path>
            <path
              fill="currentColor"
              d="M3.283 10.94a1.5 1.5 0 0 0 0 2.12l5.656 5.658a1.5 1.5 0 1 0 2.122-2.122L7.965 13.5H19.5a1.5 1.5 0 0 0 0-3H7.965l3.096-3.096a1.5 1.5 0 1 0-2.122-2.121z"
            ></path>
          </g>
        </svg>
      </a>
      <ol
        class="inline-flex items-center space-x-1 md:space-x-2 rtl:space-x-reverse"
      >
        <li class="inline-flex items-center">
          <a
            href="/"
            class="inline-flex items-center text-sm font-medium text-gray-400 hover:text-white"
          >
            <svg
              class="w-3 h-3 me-2.5"
              aria-hidden="true"
              xmlns="http://www.w3.org/2000/svg"
              fill="currentColor"
              viewBox="0 0 20 20"
            >
              <path
                d="m19.707 9.293-2-2-7-7a1 1 0 0 0-1.414 0l-7 7-2 2a1 1 0 0 0 1.414 1.414L2 10.414V18a2 2 0 0 0 2 2h3a1 1 0 0 0 1-1v-4a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v4a1 1 0 0 0 1 1h3a2 2 0 0 0 2-2v-7.586l.293.293a1 1 0 0 0 1.414-1.414Z"
              ></path>
            </svg>
            ωεβ Τσφδ
          </a>
        </li>
        <li aria-current="page">
          <div class="flex items-center">
            <svg
              class="rtl:rotate-180 w-3 h-3 text-gray-400 mx-1"
              aria-hidden="true"
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 6 10"
            >
              <path
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="m1 9 4-4-4-4"></path>
            </svg>
            <span
              class="ms-1 text-sm font-medium md:ms-2 text-gray-400 sm:hidden"
              >{
                toolName.length > 30
                  ? toolName.substring(0, 20) + "..."
                  : toolName
              }</span
            >
            <span
              class="ms-1 text-sm font-medium md:ms-2 text-gray-400 hidden sm:flex"
              >{toolName}</span
            >
          </div>
        </li>
      </ol>
      <span></span>
    </nav>
    <section class="p-4 md-p-0">
      <picture class="w-full p-4 md:p-0 md:w-5/12 h-auto float-right ml-6 mb-4">
        <img
          src={tool.properties.Image.url}
          alt={`Cover of ${id}`}
          class="object-cover w-full h-auto rounded-md"
        />
      </picture>
      <div class="clear-right inline gap-2">
        <h1 class="text-2xl font-bold text-balance">
          {toolName}
        </h1>
        <a
          href={tool.properties.URL.url}
          class="inline-flex items-center text-blue-600 hover:underline"
        >
          {tool.properties.URL.url}
          <svg
            class="w-3 h-3 ms-2.5 rtl:rotate-[270deg]"
            aria-hidden="true"
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 18 18"
          >
            <path
              stroke="currentColor"
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M15 11v4.833A1.166 1.166 0 0 1 13.833 17H2.167A1.167 1.167 0 0 1 1 15.833V4.167A1.166 1.166 0 0 1 2.167 3h4.618m4.447-2H17v5.768M9.111 8.889l7.778-7.778"
            ></path>
          </svg>
        </a>
        <div class="flex items-center mt-2.5 mb-5">
          {
            tagsList.length &&
              tagsList.map((item) => (
                <span
                  class={`text-xs font-medium me-2 px-2.5 py-0.5 rounded-full ${
                    colorVariants[item.color as keyof typeof colorVariants]
                  }`}
                >
                  {item?.name}
                </span>
              ))
          }
        </div>
        <span class="text-pretty">
          {blocks.results[0].paragraph.rich_text[0].plain_text}
        </span>
        <h3 class="text-xl mt-4">Main Features:</h3>
        <hr />
        <ul class="mt-2 space-y-1 list-disc list-outside px-6 text-gray-400">
          {
            blocks.results.map(
              (block: any, index: number) =>
                index > 1 && (
                  <li>{block.bulleted_list_item.rich_text[0].plain_text}</li>
                )
            )
          }
        </ul>
      </div>
    </section>
  </main>
</Layout>
